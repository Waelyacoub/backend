// equipement.controller.js
const Equipement = require('../models/equipement.model');  // Assurez-vous que le chemin est correct
const pools = require('../config/config');  // Importer la configuration du pool de connexions

// Assurez-vous d'instancier la classe avec le bon pool
const equipementController = {
    async getAllEquipements(req, res) {
        try {
            console.log("Requ√™te re√ßue pour r√©cup√©rer les √©quipements");
    
            let allEquipements = {}; // Stockage des √©quipements par client
    
            for (const client in pools) {
                const pool = pools[client];
                const equipement = new Equipement(pool);
    
                console.log(`Connexion √† la base de donn√©es pour ${client}...`);
                const equipements = await equipement.getAllEquipements();
                console.log(`√âquipements r√©cup√©r√©s pour ${client} :`, equipements);
    
                allEquipements[client] = equipements; // Stocker les √©quipements
            }
    
            console.log("R√©ponse finale envoy√©e :", JSON.stringify(allEquipements, null, 2));
            res.status(200).json(allEquipements);
        } catch (err) {
            console.error("Erreur lors de la r√©cup√©ration des √©quipements :", err);
            res.status(500).json({ error: 'Impossible de r√©cup√©rer les √©quipements.' });
        }
    },
    async getEquipementByModele(req, res) {
        try {
            console.log("üì• Param√®tres re√ßus :", req.params); // Afficher les param√®tres re√ßus
        
            const { modele } = req.params; // ‚úÖ S'assurer que "modele" est bien extrait
            console.log(`üîç Recherche de l'√©quipement avec le mod√®le : ${modele}`);
        
            let allEquipements = {}; // Objet pour stocker les √©quipements par client
        
            for (const client in pools) {
                const pool = pools[client];
                const equipement = new Equipement(pool);
        
                // Passer correctement le mod√®le et interroger chaque base
                const equipementsData = await equipement.getEquipementByModele(modele);
        
                if (equipementsData && equipementsData.length > 0) {
                    console.log(`üì¶ √âquipements trouv√©s pour ${client} :`, equipementsData);
                    allEquipements[client] = equipementsData; // Stocker les r√©sultats par client
                } else {
                    console.log(`Aucun √©quipement trouv√© pour ${client}`);
                    allEquipements[client] = []; // Ajouter une cl√© avec un tableau vide si aucun √©quipement trouv√©
                }
            }
        
            console.log("üì§ R√©sultats finaux envoy√©s :", allEquipements);
        
            if (Object.keys(allEquipements).length > 0) {
                res.status(200).json(allEquipements); // Envoyer les r√©sultats structur√©s par client
            } else {
                res.status(404).json({ error: "Aucun √©quipement trouv√© avec ce mod√®le." });
            }
        } catch (err) {
            console.error("‚ùå Erreur lors de la recherche de l'√©quipement :", err);
            res.status(500).json({ error: "Impossible de r√©cup√©rer l'√©quipement." });
        }
    }
    
    
    
};

module.exports = equipementController;
