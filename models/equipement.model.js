// equipement.model.js
class Equipement {
    constructor(pool, io) {
        this.pool = pool;  // Connexion √† la base de donn√©es
        this.io = io;      // WebSocket, utilis√© si n√©cessaire pour la gestion en temps r√©el
    }

    // M√©thode pour r√©cup√©rer tous les √©quipements sans filtrage
    async getAllEquipements() {
        try {
            console.log('Connexion √† la base de donn√©es...');
            // Test simple pour v√©rifier la connexion
            await this.pool.query('SELECT NOW()');
            console.log('Connexion r√©ussie !');
            
            // Ex√©cuter la requ√™te pour r√©cup√©rer tous les √©quipements
            const result = await this.pool.query("SELECT * FROM equipement");
            return result.rows;  // Retourner les r√©sultats de la base de donn√©es
        } catch (err) {
            console.error("Erreur lors de la r√©cup√©ration des √©quipements :", err);
            throw new Error("Impossible de r√©cup√©rer les √©quipements.");
        }
    }
    async getEquipementByModele(modele) {
        try {
            console.log(`üì° Requ√™te SQL en cours pour le mod√®le : ${modele}`);

            // Requ√™te SQL pour r√©cup√©rer les √©quipements ayant le mod√®le sp√©cifi√©
            const query = "SELECT * FROM equipement WHERE modele = $1";
            const result = await this.pool.query(query, [modele]);

            console.log(`‚úÖ R√©sultat trouv√© : ${result.rows.length} √©quipements`);
            return result.rows;  // Retourner les r√©sultats
        } catch (err) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration de l'√©quipement :", err);
            throw new Error("Impossible de r√©cup√©rer l'√©quipement.");
        }
    }
}



module.exports = Equipement;
